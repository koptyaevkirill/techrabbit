<?php

function helpers_theme() {
$path = drupal_get_path('module', 'helpers').'/tpl';
    return array(
        'menu' => array(
            'template' => 'menu',
            'variables' => array(
                'menu' => null
            ),
            'path' => $path,
        ),
        'filter' => array(
            'template' => 'filter',
            'variables' => array(
                'array_property' => null,
                'current_term' => null
            ),
            'path' => $path,
        ),
    );
}

function get_action_contacts(&$contacts_list) {
	if(!empty($contacts_list['city'])) {$tids[] = $contacts_list['city'];}
	if(!empty($contacts_list['metro'])) {
		foreach($contacts_list['metro'] as $item) { $tids[] = $item['tid']; }
	}
	$result['terms'] = taxonomy_term_load_multiple($tids, $conditions = array());
	$result['address'] = $contacts_list['address'];
	return $result;
}

function get_metro_label(&$tid) {
	if(!empty($tid)) { $parent = end(taxonomy_get_parents($tid)); }
	switch ($parent->tid) {
		case '118':
			$result = 'small-card__location_type_metro-blue';
			break;
		case '117':
			$result = 'small-card__location_type_metro-red';
			break;
		
		default:
			$result = 'small-card__location_type_refpoint';
			break;
	}
	return $result;
}

function get_metro_station() {
	$result = taxonomy_get_tree(4, $parent = 0, $max_depth = NULL, $load_entities = false);
	return child_to_parent($result);
}

function get_service_area() {
	return taxonomy_get_tree(9, $parent = 0, $max_depth = 1, $load_entities = false);
}

function child_to_parent(&$data) {
	foreach ($data as $term) {
        if($term->parents[0] == 0) {
            $result['terms'][$term->tid] = $term;
        } else {
        	$result['child'][$term->parents[0]][] = $term;
        }
    }
    return $result;
}

function get_full_vocabulary($vid) {
	$data['data'] = taxonomy_term_load_multiple(array(), array('vid' => $vid));
	$data['vocabulary'] = taxonomy_vocabulary_load($vid);
	return $data;
}

function get_capacity_terms() {
	return get_full_vocabulary(8);
}
function get_color_terms() {
	return get_full_vocabulary(6);
}
function get_cpu_terms() {
	return get_full_vocabulary(4);
}
function get_mobile_internet_terms() {
	return get_full_vocabulary(9);
}
function get_type_terms() {
	return get_full_vocabulary(10);
}
function get_wireless_connection_terms() {
	return get_full_vocabulary(11);
}
function get_compatibility_terms() {
	return get_full_vocabulary(12);
}
function get_memory_terms() {
	return get_full_vocabulary(5);
}
function get_screen_terms() {
	return get_full_vocabulary(7);
}

function get_related_products($product_ids) {
	$query = db_select('node', 'n');
    $query->innerJoin('field_data_field_product', 'pr', 'pr.entity_id = n.nid');
    $query->condition('pr.field_product_product_id', $product_ids, 'IN');
    $query->fields('n', array('nid'));
    return $nodes = $query->execute()->fetchAll(PDO::FETCH_COLUMN);
}
function get_array_property($tid) {
	$data = [];
	switch ($tid) {
		case 'smartfony':
			$data[] = get_screen_terms();
			$data[] = get_capacity_terms();
			$data[] = get_color_terms();
			break;
		case 'kompyutery-mac':
			$data[] = get_cpu_terms();
			$data[] = get_screen_terms();
			$data[] = get_capacity_terms();
			$data[] = get_memory_terms();
			$data[] = get_color_terms();
			break;
		case 'planshety':
			$data[] = get_mobile_internet_terms();
			$data[] = get_screen_terms();
			$data[] = get_capacity_terms();
			$data[] = get_color_terms();
			break;
		case 'aksessuary':
			$data[] = get_compatibility_terms();
			break;
	}
	return $data;
}

function get_menu_tree($menu) {
    return module_invoke('menu', 'block_view', $menu);
}

function get_menu($menu, $mobile = false) {
    $menu_tree = get_menu_tree($menu);
    echo theme('menu', array('menu' => $menu_tree, 'mobile' => $mobile));
}

function get_filter($tid = NULL) {
	if(isset($tid)) { 
		$url = explode('/', $_SERVER['REQUEST_URI']);
		$array_property = get_array_property($url[1]);
	}
    echo theme('filter', array('array_property' => $array_property, 'current_term' => $tid));
}

function get_metatag_og_image() {
	$path = current_path();
	if(stristr($path, 'node/')) {
		$nid = end(explode("/", $path));
		$node = node_load($nid);
		if($node->type === 'product_display') {
			echo '<meta property="og:image" content="'.file_create_url($node->field_image['und'][0]['uri']).'" />';
		}
	}
}